// import Agentic framework
const Agentic = require('broadai/agentic');

// variable to allow global access to Agentic instance
let agentic;

// variable to allow global access to agentConfig
let config = {};

/*-----------------------------------
*                                    *
  * -- Skill Action Definitions -- *
*                                    *
------------------------------------*/

// -- Action: action --
const action = (param) => {
  return new Promise((resolve, reject) => {

    // ... You may use Agentic accelerator method
    // ... to call external API resource depending on
    // ... your use case. Alternatively, you are free to 
    // ... write the entire logic on your own.

    agentic.callExternalResource({
      "method": "GET",
      "url": "--??--", // update as per external APIs requirements
      "headers": {
        "Content-Type": "application/json",
        "Authorization": "Bearer " + config.api_key // update as per external APIs requirements
        // add/remove headers based on external APIs requirements
      }
    }).then((resp) => {

      // ... You may 'resolve(resp)' at this point,
      // ... but in case you want to use LLM to use the 'resp'
      // ... to provide additional value based on your use case,
      // ... continue further to use Agentic accelerator methods
      // ... to help create a prompt and call LLM.

      const prompt = agentic.createPrompt(
        // system
        `You are ...`,
        // context
        `---
        {{context}}
        ---`,
        // task
        `You must ...`,
        // format
        `Respond in JSON using following structure:
          ~~~json:
          {
            "--??--": "<--??-->"
          }
          ~~~`,
        {
          "context": resp
        });
      // call LLM to respond to the prompt
      agentic.getGenAIResponse(prompt)
        .then((llmResp) => resolve(llmResp)) // accessing the 'text' field form JSON response generated by LLM
        .catch((err) => reject({ "error": true, "details": err }));
    }).catch((err) => reject({ "error": true, "details": err }));
  });
}; // action


/*--------------------------
*                         *
  * -- Module: Agent -- *
*                         *
-------------------------*/
module.exports = {
  // MANDATORY: Must include register method
  register: (broadaiConfig, agentConfig) => {
    agentic = new Agentic(broadaiConfig);
    config = agentConfig;
    /* Document what will you accept as agentConfig
    
      agentConfig = { "--??--": "--??--" };
    
    */
  },

  agent: {
    // name your agent to the likes of a persona, e.g. StockBroker, Analyst, Linguist, etc.
    "agent-name": "--??--",
    // describe what kind of overall capabilities this agent will provide. Better description will help BroadAI MAS utilize it at the right place.
    "capability": "--??--",
    // list of all the skills this agent possesses.
    "skills": [
      {
        // name the skill like a function, e.g. translateText, composeEmail, etc. 
        "skill-name": "--??--",
        // describe what the skill will help achieve. Better description will help BroadAI MAS utilize it at the right place.
        "objective": "--??--",
        // MANDATORY: Must match the skill-name
        "action": action,
        // parameters the action needs to execute
        "parameters": {
          // MANDATORY: Parameter name used in the function definition above
          "param": "--data-type-- | --description and possibly an example--"
          // RECOMMENDED: 'param' value must describe the data-type expected followed by brief description and possibly an example. Better description and examples will help BroadAI MAS determine appropriate parameter values so that the function can execute completely.
        }
      },
      /* 
      --- 
        add additional skills using the same structure above 
      --- 
      */
    ]
  }
}; // module end